image_classification_project/
├── data/
│   └── data_loader.py          # Script to load and preprocess data using tensorflow-datasets
├── model/
│   └── model.py                # Defines the model architecture (pre-trained model + custom layers)
├── training/
│   ├── train.py                # Script for the training loop and hyperparameter settings
│   └── evaluate.py             # Script to evaluate the trained model
├── utils/
│   ├── visualization.py        # Functions to generate plots and visualize results
│   └── helpers.py              # Reusable utility functions (e.g., data processing helpers)
├── results/
│   ├── models/                 # Stores saved model weights
│   ├── logs/                   # Stores training logs (e.g., loss and accuracy over epochs)
│   └── plots/                  # Stores visualization plots (e.g., accuracy curves)
├── notebooks/
│   └── exploratory_analysis.ipynb  # Jupyter notebook for experimentation and analysis
├── config.py                   # Configuration file for hyperparameters and settings
├── main.py                     # Main script to orchestrate data loading, training, and evaluation
├── README.md                   # Project documentation (setup, usage, dependencies)
├── requirements.txt            # List of project dependencies (e.g., TensorFlow, NumPy)
└── .gitignore                  # Specifies files/folders to exclude from version control

Dependencies: tensorflow, tensorflow-datasets, matplotlib
Dataset: Oxford-IIIT Pet Dataset
Workflow:
Load the dataset using tensorflow-datasets.
Preprocess images (resize to 224x224, normalize).
Apply data augmentation (e.g., flips, rotations).
Load a pre-trained model (e.g., VGG16).
Add custom classification layers.
Compile the model with adam and sparse_categorical_crossentropy.
Train on the training set, validate on the validation set.
Evaluate on the test set.
Visualize accuracy and loss curves.
(Optional) Fine-tune the model with a lower learning rate.
Save the model as an .h5 file.

To view TensorBoard logs:

Open terminal
Navigate to your project directory
Run: 
tensorboard --logdir results/logs/tensorboard